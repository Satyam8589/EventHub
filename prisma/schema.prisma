generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  name                String
  phone               String?
  avatar              String?
  role                Role                 @default(ATTENDEE)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  bookings            Booking[]
  assignedEventAdmins EventAdmin[]         @relation("AssignedEventAdmins")
  eventAdminFor       EventAdmin?
  organizedEvents     Event[]              @relation("EventOrganizer")
  reviews             Review[]
  ticketScans         TicketVerification[]

  @@map("users")
}

model Event {
  id                  String               @id @default(cuid())
  title               String
  description         String
  category            String
  location            String
  venue               String
  date                DateTime
  time                String
  price               Float
  capacity            Int
  imageUrl            String?
  tags                String[]             @default([])
  status              EventStatus          @default(UPCOMING)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  organizerId         String
  organizerEmail      String?
  organizerName       String?
  organizerPhone      String?
  featured            Boolean              @default(false)
  gallery             Json[]               @default([])
  bookings            Booking[]
  eventAdmins         EventAdmin[]
  discounts           EventDiscount[]
  organizer           User                 @relation("EventOrganizer", fields: [organizerId], references: [id])
  reviews             Review[]
  ticketVerifications TicketVerification[]

  @@map("events")
}

model Booking {
  id            String               @id @default(cuid())
  tickets       Int                  @default(1)
  totalAmount   Float
  status        BookingStatus        @default(PENDING)
  paymentMethod String?
  paymentId     String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  userId        String
  eventId       String
  event         Event                @relation(fields: [eventId], references: [id])
  user          User                 @relation(fields: [userId], references: [id])
  verifications TicketVerification[]

  @@map("bookings")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      @db.SmallInt
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, eventId])
  @@map("reviews")
}

model EventAdmin {
  id             String   @id @default(cuid())
  userId         String   @unique
  eventId        String
  assignedBy     String
  assignedAt     DateTime @default(now())
  assignedByUser User     @relation("AssignedEventAdmins", fields: [assignedBy], references: [id])
  event          Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("event_admins")
}

model TicketVerification {
  id        String   @id @default(cuid())
  scannedAt DateTime @default(now())
  scannedBy String
  bookingId String   @unique
  isValid   Boolean  @default(true)
  notes     String?
  eventId   String
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  scanner   User     @relation(fields: [scannedBy], references: [id], onDelete: Cascade)

  @@map("ticket_verifications")
}

model EventDiscount {
  id          String   @id @default(cuid())
  code        String
  description String?
  percentage  Float
  maxUses     Int?
  currentUses Int      @default(0)
  validFrom   DateTime
  validTo     DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  eventId     String
  event       Event    @relation(fields: [eventId], references: [id])

  @@unique([eventId, code])
  @@map("event_discounts")
}

enum Role {
  SUPER_ADMIN
  EVENT_ADMIN
  ORGANIZER
  ATTENDEE
}

enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REFUNDED
}

model ContactMessage {
  id          String            @id @default(cuid())
  name        String
  email       String
  subject     String
  message     String            @db.Text
  status      ContactStatus     @default(NEW)
  aiResponse  String?           @db.Text
  respondedAt DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@map("contact_messages")
}

enum ContactStatus {
  NEW
  IN_PROGRESS
  RESOLVED
  CLOSED
}
