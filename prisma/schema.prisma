// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for event attendees and organizers
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  phone       String?
  avatar      String?
  role        Role     @default(ATTENDEE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  organizedEvents Event[]      @relation("EventOrganizer")
  bookings        Booking[]
  reviews         Review[]
  eventAdminFor   EventAdmin[] // Events this user is admin for

  @@map("users")
}

// Event model for all events
model Event {
  id            String      @id @default(cuid())
  title         String
  description   String
  category      String
  location      String
  venue         String
  date          DateTime
  time          String
  price         Float
  capacity      Int
  imageUrl      String?
  tags          String[]    @default([])
  status        EventStatus @default(UPCOMING)
  featured      Boolean     @default(false)
  gallery       Json[]      @default([])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Organizer contact information
  organizerName  String?
  organizerEmail String?
  organizerPhone String?

  // Relations
  organizerId     String
  organizer       User           @relation("EventOrganizer", fields: [organizerId], references: [id])
  bookings        Booking[]
  reviews         Review[]
  eventAdmins     EventAdmin[]   // Admins assigned to this event
  discounts       EventDiscount[] // Discounts for this event

  @@map("events")
}

// Booking model for event registrations
model Booking {
  id            String        @id @default(cuid())
  tickets       Int           @default(1)
  totalAmount   Float
  status        BookingStatus @default(PENDING)
  paymentMethod String?
  paymentId     String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  userId          String
  eventId         String
  user            User                   @relation(fields: [userId], references: [id])
  event           Event                  @relation(fields: [eventId], references: [id])
  verifications   TicketVerification[]   // Ticket verifications for this booking

  @@map("bookings")
}

// Review model for event feedback
model Review {
  id        String   @id @default(cuid())
  rating    Int      @db.SmallInt
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  eventId   String
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId])
  @@map("reviews")
}

// Event Admin Assignment model
model EventAdmin {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Relations
  userId    String
  eventId   String
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])
  
  @@unique([userId, eventId])
  @@map("event_admins")
}

// Ticket Verification model
model TicketVerification {
  id          String   @id @default(cuid())
  scannedAt   DateTime @default(now())
  scannedBy   String   // Admin user ID
  
  // Relations
  bookingId   String
  booking     Booking  @relation(fields: [bookingId], references: [id])
  
  @@map("ticket_verifications")
}

// Event Discount model
model EventDiscount {
  id          String    @id @default(cuid())
  code        String    
  description String?
  percentage  Float     // 0-100 percentage discount
  maxUses     Int?      // null for unlimited
  currentUses Int       @default(0)
  validFrom   DateTime
  validTo     DateTime
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  
  // Relations
  eventId     String
  event       Event     @relation(fields: [eventId], references: [id])
  
  @@unique([eventId, code])
  @@map("event_discounts")
}

// Enums
enum Role {
  SUPER_ADMIN
  EVENT_ADMIN
  ORGANIZER
  ATTENDEE
}

enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REFUNDED
}
